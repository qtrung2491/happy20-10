import*as THREE from "three";
export function makeMat({map: e, color: a=16777215, transparent: o=!0, vertexColors: r=!0, sizeAttenuation: t=!0, alphaSupport: i=!1, clipBandWidth: n=0, vClipSlope: l=0, clipFrontZ: v=.1, blending: d=THREE.NormalBlending, opacity: g=1, depthWrite: p=!0}={}) {
    const s = new THREE.PointsMaterial({
        map: e,
        color: a,
        transparent: o,
        vertexColors: r,
        sizeAttenuation: t,
        blending: d,
        opacity: g,
        depthWrite: p
    });
    return s.onBeforeCompile = e => {
        e.vertexShader = e.vertexShader.replace("uniform float size;", `attribute float size;${i ? "\nattribute float alpha;\nvarying float vAlpha;" : ""}${n > 0 || l > 0 ? "\nvarying vec3 vViewPos;" : ""}`);
        let a = "";
        if ((n > 0 || l > 0) && (a += "  vViewPos = mvPosition.xyz;\n"),
        i && (a += "  vAlpha = alpha;\n"),
        a && (e.vertexShader = e.vertexShader.replace("#include <project_vertex>", `#include <project_vertex>\n${a}`)),
        i && (e.fragmentShader = e.fragmentShader.replace("void main() {", "varying float vAlpha;\nvoid main(){").replace("gl_FragColor = vec4( outgoingLight, diffuseColor.a );", "gl_FragColor = vec4( outgoingLight, diffuseColor.a * vAlpha );")),
        n > 0 || l > 0) {
            e.fragmentShader = e.fragmentShader.replace("void main(){", "varying vec3 vViewPos;\nvoid main(){");
            let a = "";
            n > 0 && (a += `if (abs(vViewPos.x) < ${n.toFixed(3)} && vViewPos.z < -${v.toFixed(3)}) discard;`),
            l > 0 && (a += `\n  if (vViewPos.z < -${v.toFixed(3)} && abs(vViewPos.x) < ${l.toFixed(3)} * (-vViewPos.z)) discard;`);
            const o = i ? "gl_FragColor = vec4( outgoingLight, diffuseColor.a * vAlpha );" : "gl_FragColor = vec4( outgoingLight, diffuseColor.a );";
            a && (e.fragmentShader = e.fragmentShader.replace(o, `${a}\n  ${o}`))
        }
    }
    ,
    s
}
